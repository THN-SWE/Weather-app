(()=>{"use strict";var n={890:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,":root {\n    --bacground-col: rgb(12, 111, 232);\n    --label-col: rgba(0, 0, 0, 0.46)\n}\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    background-color: var(--bacground-col);\n}\n\n#app {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    max-width: 60vw;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    padding: 10px;\n\n    /* margin: 0 auto; */\n\n    height: max-content;\n    padding: 20px;\n    border-radius: 10px;\n\n\n\n    background-color: rgba(22, 33, 43, 0.649);\n}\n#search{\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 6px;\n}\n#enter-btn {\n    border: 0;\n    padding: 20px;\n    font-size: 30px;\n    background-color: rgb(58, 58, 208);\n    color: white;\n    border-radius: 5px;\n    height: inherit;\n\n}\n\n#city-inp {\n    border: 1px solid rgb(160, 160, 210);\n     width: 30vw;\n    padding: 20px;\n    font-size: 30px;\n\n    border-radius:10px ;\n\n\n}\n#saved-cities {\n    display:flex;\n    align-items: center;\n    gap: 5px;\n\n    flex-wrap: wrap;\n    \n    border: 1px double whitesmoke;\n    border-radius:10px ;\n    background-color: var(--bacground-col);\n    width: inherit;\n    padding: 20px;\n}\n.saved {\n    flex-grow: 1;\n    max-width: fit-content;\n\n    background-color: var(--label-col);\n    color: white;\n    font-size: 26px;\n    user-select: none;\n    cursor: pointer;\n    padding: 10px;\n    \n\n    border: 1px solid white;\n    border-radius: 25px;\n\n}\n\n\n/* .saved>button {\n    background-color: transparent;\n    color: inherit;\n    border: 0;\n    font-size: 16px;\n\n}\n\n.saved button:hover {\n    color: tomato;\n\n}\n\n */\n\n#weather-out {\n    color: whitesmoke;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin: 10px;\n    font-size: large;\n    font-family: 'Courier New', Courier, monospace;\n}\n\n@media (max-width:430px) {\n    #city-inp {\n        padding: 5px;\n        font-size: 22px;\n      \n    }\n    #enter-btn{\n        font-size: 16px;\n        padding: 10px;\n        \n    }\n    #saved-cities{\n        padding: 5px;\n    }\n    .saved{\n        font-size: 13px;\n        padding: 3px;\n        gap: 15px;\n        \n    }\n}","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;IACI,kCAAkC;IAClC;AACJ;;AAEA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,sCAAsC;AAC1C;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,eAAe;IACf,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,aAAa;;IAEb,oBAAoB;;IAEpB,mBAAmB;IACnB,aAAa;IACb,mBAAmB;;;;IAInB,yCAAyC;AAC7C;AACA;IACI,oBAAoB;IACpB,mBAAmB;IACnB,uBAAuB;IACvB,QAAQ;AACZ;AACA;IACI,SAAS;IACT,aAAa;IACb,eAAe;IACf,kCAAkC;IAClC,YAAY;IACZ,kBAAkB;IAClB,eAAe;;AAEnB;;AAEA;IACI,oCAAoC;KACnC,WAAW;IACZ,aAAa;IACb,eAAe;;IAEf,mBAAmB;;;AAGvB;AACA;IACI,YAAY;IACZ,mBAAmB;IACnB,QAAQ;;IAER,eAAe;;IAEf,6BAA6B;IAC7B,mBAAmB;IACnB,sCAAsC;IACtC,cAAc;IACd,aAAa;AACjB;AACA;IACI,YAAY;IACZ,sBAAsB;;IAEtB,kCAAkC;IAClC,YAAY;IACZ,eAAe;IACf,iBAAiB;IACjB,eAAe;IACf,aAAa;;;IAGb,uBAAuB;IACvB,mBAAmB;;AAEvB;;;AAGA;;;;;;;;;;;;;EAaE;;AAEF;IACI,iBAAiB;IACjB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,YAAY;IACZ,gBAAgB;IAChB,8CAA8C;AAClD;;AAEA;IACI;QACI,YAAY;QACZ,eAAe;;IAEnB;IACA;QACI,eAAe;QACf,aAAa;;IAEjB;IACA;QACI,YAAY;IAChB;IACA;QACI,eAAe;QACf,YAAY;QACZ,SAAS;;IAEb;AACJ",sourcesContent:[":root {\n    --bacground-col: rgb(12, 111, 232);\n    --label-col: rgba(0, 0, 0, 0.46)\n}\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    background-color: var(--bacground-col);\n}\n\n#app {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    max-width: 60vw;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    padding: 10px;\n\n    /* margin: 0 auto; */\n\n    height: max-content;\n    padding: 20px;\n    border-radius: 10px;\n\n\n\n    background-color: rgba(22, 33, 43, 0.649);\n}\n#search{\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 6px;\n}\n#enter-btn {\n    border: 0;\n    padding: 20px;\n    font-size: 30px;\n    background-color: rgb(58, 58, 208);\n    color: white;\n    border-radius: 5px;\n    height: inherit;\n\n}\n\n#city-inp {\n    border: 1px solid rgb(160, 160, 210);\n     width: 30vw;\n    padding: 20px;\n    font-size: 30px;\n\n    border-radius:10px ;\n\n\n}\n#saved-cities {\n    display:flex;\n    align-items: center;\n    gap: 5px;\n\n    flex-wrap: wrap;\n    \n    border: 1px double whitesmoke;\n    border-radius:10px ;\n    background-color: var(--bacground-col);\n    width: inherit;\n    padding: 20px;\n}\n.saved {\n    flex-grow: 1;\n    max-width: fit-content;\n\n    background-color: var(--label-col);\n    color: white;\n    font-size: 26px;\n    user-select: none;\n    cursor: pointer;\n    padding: 10px;\n    \n\n    border: 1px solid white;\n    border-radius: 25px;\n\n}\n\n\n/* .saved>button {\n    background-color: transparent;\n    color: inherit;\n    border: 0;\n    font-size: 16px;\n\n}\n\n.saved button:hover {\n    color: tomato;\n\n}\n\n */\n\n#weather-out {\n    color: whitesmoke;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin: 10px;\n    font-size: large;\n    font-family: 'Courier New', Courier, monospace;\n}\n\n@media (max-width:430px) {\n    #city-inp {\n        padding: 5px;\n        font-size: 22px;\n      \n    }\n    #enter-btn{\n        font-size: 16px;\n        padding: 10px;\n        \n    }\n    #saved-cities{\n        padding: 5px;\n    }\n    .saved{\n        font-size: 13px;\n        padding: 3px;\n        gap: 15px;\n        \n    }\n}"],sourceRoot:""}]);const A=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var A=0;A<this.length;A++){var c=this[A][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var s=[].concat(n[d]);r&&i[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),t&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=t):s[2]=t),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),e.push(s))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],A=0;A<n.length;A++){var c=n[A],d=r.base?c[0]+r.base:c[0],s=a[d]||0,p="".concat(d," ").concat(s);a[d]=s+1;var l=t(p),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==l)e[l].references++,e[l].updater(u);else{var f=o(u,r);r.byIndex=A,e.splice(A,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var A=t(a[i]);e[A].references--}for(var c=r(n,o),d=0;d<a.length;d++){var s=t(a[d]);0===e[s].references&&(e[s].updater(),e.splice(s,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),A=t(565),c=t.n(A),d=t(216),s=t.n(d),p=t(589),l=t.n(p),u=t(890),f={};f.styleTagTransform=l(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=s(),e()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;let C=document.getElementById("saved-cities"),g=document.getElementById("temp"),m=document.getElementById("desc"),x=document.getElementById("city"),b=document.getElementById("city-inp"),I="";let v=document.querySelector("#enter-btn"),h={};const B=n=>{const e=document.createElement("div"),t=document.createElement("span");return e.classList.add("saved"),e.setAttribute("id",n),t.textContent=n,e.appendChild(t),e.onclick=()=>{b.value=e.id,console.log(e.id),e.outerHTML="",delete h[e.id],w()},e};function y(n){""!=n&&C.appendChild(B(n))}function w(){let n=JSON.stringify(h);localStorage.setItem("saved_cities",n)}function E(){try{return h=JSON.parse(localStorage.getItem("saved_cities"))||{},h}catch{console.error("Error retrieving data from Local Storage")}}!async function(){for(let n in E())y(n);v.addEventListener("click",(async()=>{I=b.value,v.disabled=!0,await async function(){(await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${b.value}&appid=bdebfbd56aa02bc66c48751fd367cc66`)).json().then((n=>{try{if(200===n.cod){const e=(n.main.temp-273.15).toFixed(2),t=n.weather[0].description;g.textContent=e+"°C.",m.textContent=t,x.textContent=b.value,y(b.value),h=E(),h[b.value]=b.value,w(),b.value=""}else alert("City not found. Please try again.")}catch{console.error("Error fetching weather data:"),alert("fetching weather data")}finally{v.disabled=!1}}))}()}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,